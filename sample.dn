!!!!Text!x:-55.0!y:30.0!width:700.0!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
## Advanced control flow with continuations

Lets say we have a function that takes a binary tree, and returns the first
element to satisfy a predicate:

```ocaml
type 'a tree = Empty | Node of 'a tree * 'a * 'a tree

let rec find (p : 'a -> bool) (t : 'a tree) : 'a option = match t with
    | Empty -> None
    | Node (l, x, r) ->
        if p x then Some x
        else match find p l with
            | Some x -> Some x
            | None -> find p r
```

We could rewrite this in the most obvious continuation-passing style:

```ocaml
let rec find1 (p : 'a -> bool) (t : 'a tree) (return : 'a option -> 'r) : 'r = match t with
  | Empty -> return None
  | Node (l, x, r) ->
    if p x then return (Some x) else
    find1 p l (fun result -> match result with
                             | None -> find1 p r return
                             | Some x -> return (Some x))
```

However we can greatly optimize this by noting that the original function can
essentially return in one of two ways, either by failing (returning `None`) or
by succeeding (returning `Some x`). We can represent this in the continuation
style by passing two continuations, one for the success case and the other for
the failure case:

```ocaml
let rec find_tr (p : 'a -> bool) (t : 'a tree)
                (fail : unit -> 'r) (return : 'a -> 'r) : 'r =
    match t with
    | Empty -> fail ()
    | Node (l, x, r) ->
        if p x then return x else
        (* call find_tr on the left subtree, with a fail continuation that
           calls find_tr on the right subtree *)
        let find_r = fun () -> find_tr p r fail return in
        find_tr p l find_r return
```

!!!!Text!x:706.0!y:1138.0!width:300.0!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

In addition to looking far nicer, this last version actually is more efficient.
At the point it finds something the original `return` is immediately called -
without having to jump back through the stack frames of the inner matches, nor
examine the results of the previous recursive calls.

!!!!Text!x:-600.0!y:30!width:500.0!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

This paragraph should have zero vertical space between it and the start of the
element. The next paragraph should have no additional vertical space between it
and the current, beyond what you would expect from a `</p><p>` junction.

The following line styles should be functional: *italic*, **bold**, `code`,
__underline__, and ~~strikethrough~~. Single underscores like _this_ and single
tilde like ~this~ should be displayed as is.


This paragraph should have 1 extra "line" of space between it and the previous,
as compared to the standard. The following should have 2 "lines".



These<br>should<br>be<br>separate<br>lines.
Each of the following lines should be its own element, with identical vertical
space between each.
# Inline stuff should work in a heading:
## *italic*, **bold**, `code`, __underline__, and ~~strikethrough~~.
foo
### H3

bar

#### H4

##### H5

```ocaml
let x = 1
```
###### H6
```ocaml
let y = 2
```


The following should be a list of items
- indent level 0
- indent level 0
    - indent level 1
    - indent level 1
- indent level 0
    - indent level 1
        - indent level 2
        - indent level 2
    - indent level 1
- indent level 0
            - indent level 3

The following should be a numbered list
1. foo
2. bar
    1. baz
    2. quux

The following should be a single blockquote
> This is a blockquote
> and this is the second line
>> Where as this is nested
> and this is back to the first level

The following should be a table
| foo | bar | baz |
| --- | --- | --- |
| 1   | 2   | 3   |
| 4   | 5   | 6   |

The following should be a horizontal rule:
---
as should this:
--------------------------------------------------------------------------------

Links should be [able to contain *inline* ~~styles~~ and `code`](http://example.com).

The following should be an image
![image](http://example.com/image.png)

